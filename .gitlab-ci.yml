---


stages:
  - setup
  - build
  - unit_test
  - system_test
  # - deploy

.general_definitions: &general_definitions
  before_script:
    # Load toolchain
    - cat $TOOLCHAIN
    - source $TOOLCHAIN
    - c++ --version
    # Define helper functions
    - dune_configure() { $CI_BUILDS_DIR/dune-common/bin/dunecontrol --builddir=$CI_BUILDS_DIR/build --module=$1 configure "Ninja" ; }
    - dune_make() { $CI_BUILDS_DIR/dune-common/bin/dunecontrol --builddir=$CI_BUILDS_DIR/build --module=$1 make ; }
    - dune_all() { dune_configure $1; dune_make $1 ; }
  tags:
    - "cores:4"
  artifacts:
    paths:
      - dune-*
      - build

# OS setup
.debian_gcc: &debian_gcc
  <<: *general_definitions
  image: registry.dune-project.org/docker/ci/debian:10
  variables:
    CI_BUILDS_DIR: /builds/santiago.ospina/dune-copasi
    TOOLCHAIN: /duneci/toolchains/gcc-8-17

.debian_clang: &debian_clang
  <<: *general_definitions
  image: registry.dune-project.org/docker/ci/debian:10
  variables:
    CI_BUILDS_DIR: /builds/santiago.ospina/dune-copasi
    TOOLCHAIN: /duneci/toolchains/clang-7-libcpp-17


.ubuntu_gcc: &ubuntu_gcc
  <<: *general_definitions
  image: registry.dune-project.org/docker/ci/ubuntu:18.04
  variables:
    CI_BUILDS_DIR: /builds/santiago.ospina/dune-copasi
    TOOLCHAIN: /duneci/toolchains/gcc-7-17

.ubuntu_clang: &ubuntu_clang
  <<: *general_definitions
  image: registry.dune-project.org/docker/ci/ubuntu:18.04
  variables:
    CI_BUILDS_DIR: /builds/santiago.ospina/dune-copasi
    TOOLCHAIN: /duneci/toolchains/clang-6-17
# Stages
.setup: &setup
  stage: setup
  script:
    # move everything into a subfolder dune-copasi
    - mkdir dune-copasi & ls | grep -v dune-copasi | xargs mv -t dune-copasi
    # clone needed repositories
    - git clone -b support/dune-copasi https://gitlab.dune-project.org/santiago.ospina/dune-common
    - git clone --recursive https://gitlab.dune-project.org/staging/dune-logging
    - git clone https://gitlab.dune-project.org/core/dune-geometry
    - git clone https://gitlab.dune-project.org/core/dune-grid
    - git clone https://gitlab.dune-project.org/staging/dune-uggrid
    - git clone https://gitlab.dune-project.org/core/dune-istl
    - git clone https://gitlab.dune-project.org/core/dune-localfunctions
    - git clone -b support/dune-copasi https://gitlab.dune-project.org/santiago.ospina/dune-typetree
    - git clone https://gitlab.dune-project.org/staging/dune-functions
    - git clone -b support/dune-copasi https://gitlab.dune-project.org/santiago.ospina/dune-pdelab
    - git clone -b support/dune-copasi https://gitlab.dune-project.org/santiago.ospina/dune-multidomaingrid
    # make required dune modules
    - dune_all dune-logging
    - dune_all dune-pdelab
    - dune_all dune-multidomaingrid

.build: &build
  stage: build
  script:
    - dune_all dune-copasi

.unit_test: &unit_test
  stage: unit_test
  script: 
    - cd build/dune-copasi
    - make build_unit_tests
    - ctest -j2 -L "unit"

.system_test: &system_test
  stage: system_test
  script: 
    - cd build/dune-copasi
    - make build_system_tests
    - ctest -j2 -L "system"

# debian gcc
setup:debian_gcc:
  <<: *debian_gcc
  <<: *setup

build:debian_gcc:
  <<: *debian_gcc
  <<: *build
  dependencies:
    - setup:debian_gcc

unit_test:debian_gcc:
  <<: *debian_gcc
  <<: *unit_test
  dependencies:
    - build:debian_gcc

system_test:debian_gcc:
  <<: *debian_gcc
  <<: *system_test
  dependencies:
    - build:debian_gcc

# ubuntu gcc
setup:ubuntu_gcc:
  <<: *ubuntu_gcc
  <<: *setup  

build:ubuntu_gcc:
  <<: *ubuntu_gcc
  <<: *build
  dependencies:
    - setup:ubuntu_gcc

unit_test:ubuntu_gcc:
  <<: *ubuntu_gcc
  <<: *unit_test
  dependencies:
    - build:ubuntu_gcc

system_test:ubuntu_gcc:
  <<: *ubuntu_gcc
  <<: *system_test
  dependencies:
    - build:ubuntu_gcc

# debian clang
setup:debian_clang:
  <<: *debian_clang
  <<: *setup

build:debian_clang:
  <<: *debian_clang
  <<: *build
  dependencies:
    - setup:debian_clang

unit_test:debian_clang:
  <<: *debian_clang
  <<: *unit_test
  dependencies:
    - build:debian_clang

system_test:debian_clang:
  <<: *debian_clang
  <<: *system_test
  dependencies:
    - build:debian_clang

# ubuntu clang
setup:ubuntu_clang:
  <<: *ubuntu_clang
  <<: *setup  

build:ubuntu_clang:
  <<: *ubuntu_clang
  <<: *build
  dependencies:
    - setup:ubuntu_clang

unit_test:ubuntu_clang:
  <<: *ubuntu_clang
  <<: *unit_test
  dependencies:
    - build:ubuntu_clang

system_test:ubuntu_clang:
  <<: *ubuntu_clang
  <<: *system_test
  dependencies:
    - build:ubuntu_clang