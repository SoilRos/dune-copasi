function(swap_args ARG1 ARG2)
  set(_tmp ${ARG1})
  set(ARG1 ${ARG2})
  set(ARG2 ${_tmp})
  unset(_tmp)
endfunction()

if(NOT dune-copasi_FOUND)
  # Whether this module is installed or not
  set(dune-copasi_INSTALLED @MODULE_INSTALLED@)

  # Settings specific to the module
  @dune-copasi_INIT@

  # Package initialization
  @PACKAGE_INIT@

  #report other information
  set_and_check(dune-copasi_PREFIX "${PACKAGE_PREFIX_DIR}")
  set_and_check(dune-copasi_INCLUDE_DIRS "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
  set(dune-copasi_DEPENDS "@dune-copasi_DEPENDS@")
  set(dune-copasi_SUGGESTS "@dune-copasi_SUGGESTS@")
  set(dune-copasi_MODULE_PATH "@PACKAGE_DUNE_INSTALL_MODULEDIR@")
  set(DUNE_PYTHON_VIRTUALENV_SETUP ${DUNE_PYTHON_VIRTUALENV_SETUP})

  include(CMakeFindDependencyMacro)

  # setup basic dune dependecy
  find_dependency(dune-common REQUIRED)

  # make sure to find cmake modules for dune-common
  list(APPEND CMAKE_MODULE_PATH "${dune-common_MODULE_PATH}")
  include(DuneMacros)

  # setup other dune dependecies
  swap_args(ProjectName _ProjectName)
  dune_create_dependency_tree()
  dune_process_dependency_macros()
  swap_args(ProjectName _ProjectName)

  # make sure to find cmake modules for dune-copasi
  list(APPEND CMAKE_MODULE_PATH "${dune-copasi_MODULE_PATH}")

  # setup dependencies
  find_dependency(muparser)
  find_dependency(TIFF)
  find_dependency(Filesystem)
  if(@USE_FALLBACK_FILESYSTEM@)
    find_package(ghc_filesystem)
  endif()

  # import targets
  get_filename_component(_dir "${CMAKE_CURRENT_LIST_FILE}" PATH)
  include("${_dir}/dune-copasi-targets.cmake")

  add_library(dune::copasi ALIAS dune-copasi::dune-copasi)
endif()