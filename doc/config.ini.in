[logging]
default.level = trace

[logging.backend.model]
level = trace
indent = 2

[grid]
file = ${CMAKE_CURRENT_SOURCE_DIR}/grid.msh

[model]
begin_time = 0.
end_time = 0.01

[model.compartements]
# name a compartment and assign index of physical surfaces in gmsh file
environment = 0
cell        = 1
nucleoid    = 2

[model.membrane.environment2cell]
u_0 = 1e-2


############################ Model for environment #############################
[model.environment]
name = environment
begin_time = 0.
end_time = 0.01

[model.environment.initial]
u_0 = 0.
u_1 = 0.
u_2 = 0.
u_3 = 0

[model.environment.reaction]
u_0 = +u_0*u_1
u_1 = +u_0*u_1
u_2 = -u_0*u_1
u_3 = -u_0*u_1

[model.environment.reaction.jacobian]
d(u_0)/d(u_0) = u_1
d(u_0)/d(u_1) = u_0
d(u_0)/d(u_2) = 0
d(u_0)/d(u_3) = 0
d(u_1)/d(u_0) = u_1
d(u_1)/d(u_1) = u_0
d(u_1)/d(u_2) = 0
d(u_1)/d(u_3) = 0
d(u_2)/d(u_0) = -u_1
d(u_2)/d(u_1) = -u_0
d(u_2)/d(u_2) = 0
d(u_2)/d(u_3) = 0
d(u_3)/d(u_0) = -u_1
d(u_3)/d(u_1) = -u_0
d(u_3)/d(u_2) = 0
d(u_3)/d(u_3) = 0

[model.environment.diffusion]
u_0 = 1.
u_1 = 1E-10
u_2 = 1E-10
u_3 = 1E-10

########################### Model for cell #####################################
[model.cell]
name = cell
begin_time = 0.
end_time = 0.01

[model.cell.initial]
u_0 = (x>1.5) ? 1. : (x<1.1 ? 0. : (x-1.1)^2/0.4^2)
u_1 = (x>1.0) ? 0. : (x<0.6 ? 1. : (x-1.0)^2/0.4^2)
u_2 = 0.

[model.cell.reaction]
u_0 = +u_0*u_1
u_1 = +u_0*u_1
u_2 = -u_0*u_1

[model.cell.reaction.jacobian]
d(u_0)/d(u_0) = u_1
d(u_0)/d(u_1) = u_0
d(u_0)/d(u_2) = 0
d(u_1)/d(u_0) = u_1
d(u_1)/d(u_1) = u_0
d(u_1)/d(u_2) = 0
d(u_2)/d(u_0) = -u_1
d(u_2)/d(u_1) = -u_0
d(u_2)/d(u_2) = 0

[model.cell.diffusion]
u_0 = 1.
u_1 = 1.
u_2 = 1.

########################### Model for nucleoid #################################
[model.nucleoid]
name = nucleoid
begin_time = 0.
end_time = 0.01

[model.nucleoid.initial]
u_0 = 0.
u_1 = 0.
#u_2 = 0.

[model.nucleoid.reaction]
u_0 = +u_0*u_1
u_1 = +u_0*u_1
#u_2 = -u_0*u_1

[model.nucleoid.reaction.jacobian]
d(u_0)/d(u_0) = u_1
d(u_0)/d(u_1) = u_0
#d(u_0)/d(u_2) = 0
d(u_1)/d(u_0) = u_1
d(u_1)/d(u_1) = u_0
#d(u_1)/d(u_2) = 0
#d(u_2)/d(u_0) = -u_1
#d(u_2)/d(u_1) = -u_0
#d(u_2)/d(u_2) = 0

[model.nucleoid.diffusion]
u_0 = 1E-10
u_1 = 1.
#u_2 = 1E-10